/**
 *  Clearfix
 *
 *  Usage: append to container, that contains floated elements - @include clearfix;
 */
@mixin clearfix {
    &:after {
        content: "";
        display: block;
        clear: both;
        width: 100%;
        height: 0;
    }
}

/**
 *  Colors
 */


$primary: #3D6582;
$primaryBG: #0C3E63;
$text: #383838;
$input: #242529;
$white: #ffffff;
$light: #f5f5f4;
$form: #f4f4f3;
$greyBG: #dadcda;
$hover: #d7d7d6;
$black: #000;

/**
 *  «Respond to» mixin
 *
 *  Mixin to manage responsive breakpoints
 *  @param {String} $breakpoint - Breakpoint name
 *  @author Hugo Giraudel
 *
 *  @require $breakpoints
 */

$breakpoints: (
    'desktop': 1680px,
    'laptop': 1439px,
    'large': 1366px,
    'medium': 1200px,
    'tablet': 1023px,
    'phone':  768px,
    'phone_l':  540px,
    'xs':  460px,
    'small':  374px
);
// @include respond-to('phone') {}
@mixin respond-to( $breakpoint ) {
    @if map-has-key( $breakpoints, $breakpoint ) {
        @media ( max-width: map-get( $breakpoints, $breakpoint ) ) {
            @content;
        }
    }
    
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys( $breakpoints )}.";
    }
}
@mixin respond-from( $breakpoint ) {
    @if map-has-key( $breakpoints, $breakpoint ) {
        @media ( min-width: map-get( $breakpoints, $breakpoint ) ) {
            @content;
        }
    }
    
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys( $breakpoints )}.";
    }
}


/**
 *  Placeholder
 *
 *  Usage: append to input fields
 */
@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }

  @include optional-at-root(':-moz-placeholder') {
    @content;
  }

  @include optional-at-root('::-moz-placeholder') {
    @content;
  }
  @include optional-at-root('::placeholder') {
    @content;
  }

  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}

/// Animate css properties
// usage
// scss - @include animate(color);
//     or @include animate(color width);
//     or @include animate(color width, 1s, linear);
//
$animation-speed: .3s !default;

@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {
    $list: ();
    @each $prop in $properties {
        $str: #{$prop} #{$duration} #{$easing};
        $list: join($list, #{$str}, comma);
    }
    transition: $list;
}
